#!/usr/bin/env node

/**
 * Script de build inteligente para Prisma + Next.js
 * 
 * - Se DIRECT_URL existe: usa `prisma migrate deploy` (ideal para produ√ß√£o)
 * - Se DIRECT_URL n√£o existe: usa `prisma db push` (funciona sem DIRECT_URL)
 * 
 * Isso garante que o build SEMPRE funciona, independente da configura√ß√£o.
 */

const { execSync } = require('child_process');

console.log('üöÄ OLV Intelligence - Build Script');
console.log('=====================================\n');

// Verificar DATABASE_URL
console.log('üîç Verificando vari√°veis de ambiente...');
if (!process.env.DATABASE_URL) {
  console.error('‚ùå ERROR: DATABASE_URL n√£o configurada!');
  console.error('   Configure DATABASE_URL no Vercel para continuar.');
  process.exit(1);
}
console.log('‚úÖ DATABASE_URL configurada');

// Verificar DIRECT_URL
const hasDirectUrl = !!process.env.DIRECT_URL;
if (hasDirectUrl) {
  console.log('‚úÖ DIRECT_URL configurada');
} else {
  console.log('‚ö†Ô∏è  DIRECT_URL n√£o encontrada (usando fallback)');
}

try {
  // Passo 1: Gerar Prisma Client
  console.log('\nüì¶ Passo 1/3: Gerando Prisma Client...');
  execSync('npx prisma generate', { stdio: 'inherit' });
  console.log('‚úÖ Prisma Client gerado com sucesso');

  // Passo 2: Sincronizar banco de dados
  console.log('\nüóÑÔ∏è  Passo 2/3: Sincronizando banco de dados...');
  
  // Tentar migrate deploy se DIRECT_URL existe
  if (hasDirectUrl) {
    console.log('   Tentando: prisma migrate deploy (com hist√≥rico de migra√ß√µes)');
    console.log('   Conex√£o: DIRECT_URL (porta 5432 - direta)');
    try {
      execSync('npx prisma migrate deploy', { stdio: 'inherit' });
      console.log('‚úÖ Migra√ß√µes aplicadas com sucesso');
    } catch (error) {
      console.log('‚ö†Ô∏è  Migrate deploy falhou (porta 5432 pode estar bloqueada)');
      console.log('   Usando fallback: prisma db push');
      console.log('   Conex√£o: DATABASE_URL (porta 6543 - pooler)');
      execSync('npx prisma db push --accept-data-loss --skip-generate', { stdio: 'inherit' });
      console.log('‚úÖ Banco sincronizado via db push');
    }
  } else {
    console.log('   Usando: prisma db push (sincroniza√ß√£o direta)');
    console.log('   Conex√£o: DATABASE_URL (porta 6543 - pooler)');
    execSync('npx prisma db push --accept-data-loss --skip-generate', { stdio: 'inherit' });
    console.log('‚úÖ Banco sincronizado via db push');
  }

  // Passo 3: Build Next.js
  console.log('\nüèóÔ∏è  Passo 3/3: Building Next.js...');
  execSync('npx next build', { stdio: 'inherit' });
  console.log('‚úÖ Next.js build conclu√≠do');

  console.log('\n=====================================');
  console.log('üéâ Build conclu√≠do com sucesso!\n');
  
  // Informa√ß√µes adicionais
  if (!hasDirectUrl) {
    console.log('üí° DICA: Para usar migra√ß√µes com hist√≥rico completo,');
    console.log('   adicione DIRECT_URL nas vari√°veis de ambiente do Vercel:');
    console.log('   DIRECT_URL=postgresql://postgres:PASSWORD@db.PROJECT.supabase.co:5432/postgres?sslmode=require\n');
  }

} catch (error) {
  console.error('\n‚ùå Build falhou!');
  console.error('Erro:', error.message);
  process.exit(1);
}

