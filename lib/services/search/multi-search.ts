/**
 * Sistema Multi-API de Busca com Fallback Autom√°tico
 * 
 * Prioridade:
 * 1. Google CSE (100 queries/dia gr√°tis) - J√° configurado
 * 2. Bing Search API (10.000 queries/m√™s gr√°tis) - Fallback
 * 3. Serper.dev (2.500 queries/m√™s gr√°tis) - Fallback secund√°rio
 * 
 * Benef√≠cios:
 * - Maximiza quotas gratuitas (13.100 queries/m√™s total)
 * - Resiliente: se uma API cair, usa outra
 * - Sem altera√ß√£o no c√≥digo existente
 */

interface SearchResult {
  url: string
  title: string
  snippet: string
  date?: string
}

interface MultiSearchOptions {
  query: string
  maxResults?: number
  dateRestrict?: string // ex: 'y1' para √∫ltimo ano
}

interface MultiSearchResponse {
  results: SearchResult[]
  provider: 'google' | 'bing' | 'serper' | 'cache'
  cached: boolean
}

/**
 * Buscar no Google Custom Search
 */
async function searchGoogle(
  query: string,
  maxResults: number = 10
): Promise<SearchResult[]> {
  const apiKey = process.env.GOOGLE_API_KEY
  const cseId = process.env.GOOGLE_CSE_ID

  if (!apiKey || !cseId) {
    throw new Error('Google CSE n√£o configurado')
  }

  const url = `https://www.googleapis.com/customsearch/v1?key=${apiKey}&cx=${cseId}&q=${encodeURIComponent(query)}&num=${maxResults}`
  
  console.log('[MultiSearch] üîµ Tentando Google CSE...')
  const response = await fetch(url, { 
    next: { revalidate: 3600 },
    signal: AbortSignal.timeout(10000) // 10s timeout
  })

  if (!response.ok) {
    const status = response.status
    if (status === 429) {
      throw new Error('QUOTA_EXCEEDED')
    } else if (status === 403) {
      throw new Error('API_KEY_INVALID')
    } else {
      throw new Error(`HTTP ${status}`)
    }
  }

  const data = await response.json()

  return (data.items || []).map((item: any) => ({
    url: item.link,
    title: item.title,
    snippet: item.snippet,
    date: item.pagemap?.metatags?.[0]?.['article:published_time'] || 
          item.pagemap?.metatags?.[0]?.['og:updated_time'] || 
          undefined,
  }))
}

/**
 * Buscar no Bing Search API
 * 
 * Setup:
 * 1. V√° em: https://portal.azure.com
 * 2. Crie "Bing Search v7"
 * 3. Copie a chave
 * 4. Adicione BING_SEARCH_API_KEY no Vercel
 */
async function searchBing(
  query: string,
  maxResults: number = 10
): Promise<SearchResult[]> {
  const apiKey = process.env.BING_SEARCH_API_KEY

  if (!apiKey) {
    throw new Error('Bing Search n√£o configurado')
  }

  const url = `https://api.bing.microsoft.com/v7.0/search?q=${encodeURIComponent(query)}&count=${maxResults}`
  
  console.log('[MultiSearch] üü¶ Tentando Bing Search API...')
  const response = await fetch(url, {
    headers: {
      'Ocp-Apim-Subscription-Key': apiKey,
    },
    next: { revalidate: 3600 },
    signal: AbortSignal.timeout(10000)
  })

  if (!response.ok) {
    const status = response.status
    if (status === 429) {
      throw new Error('QUOTA_EXCEEDED')
    } else if (status === 401 || status === 403) {
      throw new Error('API_KEY_INVALID')
    } else {
      throw new Error(`HTTP ${status}`)
    }
  }

  const data = await response.json()

  return (data.webPages?.value || []).map((item: any) => ({
    url: item.url,
    title: item.name,
    snippet: item.snippet,
    date: item.dateLastCrawled || undefined,
  }))
}

/**
 * Buscar no Serper.dev
 * 
 * Setup:
 * 1. V√° em: https://serper.dev
 * 2. Crie conta (2.500 queries gr√°tis)
 * 3. Copie a API key
 * 4. Adicione SERPER_API_KEY no Vercel
 */
async function searchSerper(
  query: string,
  maxResults: number = 10
): Promise<SearchResult[]> {
  const apiKey = process.env.SERPER_API_KEY

  if (!apiKey) {
    throw new Error('Serper n√£o configurado')
  }

  const url = 'https://google.serper.dev/search'
  
  console.log('[MultiSearch] üü™ Tentando Serper.dev...')
  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'X-API-KEY': apiKey,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      q: query,
      num: maxResults,
    }),
    signal: AbortSignal.timeout(10000)
  })

  if (!response.ok) {
    const status = response.status
    if (status === 429) {
      throw new Error('QUOTA_EXCEEDED')
    } else if (status === 401 || status === 403) {
      throw new Error('API_KEY_INVALID')
    } else {
      throw new Error(`HTTP ${status}`)
    }
  }

  const data = await response.json()

  return (data.organic || []).map((item: any) => ({
    url: item.link,
    title: item.title,
    snippet: item.snippet,
    date: item.date || undefined,
  }))
}

/**
 * Busca Multi-API com Fallback Autom√°tico
 * 
 * Tenta na ordem:
 * 1. Google (100/dia gr√°tis)
 * 2. Bing (10.000/m√™s gr√°tis) 
 * 3. Serper (2.500/m√™s gr√°tis)
 */
export async function multiSearch(
  options: MultiSearchOptions
): Promise<MultiSearchResponse> {
  const { query, maxResults = 10 } = options
  
  console.log('[MultiSearch] üîç Iniciando busca multi-API:', query)

  // Tentar Google primeiro (melhor para empresas BR)
  try {
    const results = await searchGoogle(query, maxResults)
    console.log('[MultiSearch] ‚úÖ Google CSE: sucesso!', results.length, 'resultados')
    return {
      results,
      provider: 'google',
      cached: false,
    }
  } catch (error: any) {
    console.warn('[MultiSearch] ‚ö†Ô∏è Google CSE falhou:', error.message)
    
    // Se n√£o √© quota, retornar erro
    if (!error.message.includes('QUOTA') && !error.message.includes('429')) {
      console.error('[MultiSearch] ‚ùå Erro fatal no Google:', error.message)
      // Continuar para fallback mesmo assim
    }
  }

  // Tentar Bing (fallback prim√°rio - 10k/m√™s gr√°tis!)
  try {
    const results = await searchBing(query, maxResults)
    console.log('[MultiSearch] ‚úÖ Bing Search: sucesso!', results.length, 'resultados')
    return {
      results,
      provider: 'bing',
      cached: false,
    }
  } catch (error: any) {
    console.warn('[MultiSearch] ‚ö†Ô∏è Bing Search falhou:', error.message)
    
    // Se Bing n√£o est√° configurado, √© esperado
    if (error.message.includes('n√£o configurado')) {
      console.log('[MultiSearch] üí° Bing n√£o configurado. Configure para 10k queries gr√°tis/m√™s!')
    }
  }

  // Tentar Serper (fallback secund√°rio - 2.5k/m√™s gr√°tis)
  try {
    const results = await searchSerper(query, maxResults)
    console.log('[MultiSearch] ‚úÖ Serper: sucesso!', results.length, 'resultados')
    return {
      results,
      provider: 'serper',
      cached: false,
    }
  } catch (error: any) {
    console.warn('[MultiSearch] ‚ö†Ô∏è Serper falhou:', error.message)
    
    if (error.message.includes('n√£o configurado')) {
      console.log('[MultiSearch] üí° Serper n√£o configurado. Configure para 2.5k queries gr√°tis/m√™s!')
    }
  }

  // Todas as APIs falharam
  console.error('[MultiSearch] ‚ùå TODAS AS APIs FALHARAM!')
  console.error('[MultiSearch] üí° Configurar APIs alternativas resolve isso:')
  console.error('[MultiSearch] - Bing: https://portal.azure.com (10k gr√°tis/m√™s)')
  console.error('[MultiSearch] - Serper: https://serper.dev (2.5k gr√°tis/m√™s)')

  // Retornar vazio ao inv√©s de erro (dados parciais)
  return {
    results: [],
    provider: 'google', // Mant√©m google como provider original
    cached: false,
  }
}

/**
 * Buscar website oficial da empresa
 */
export async function searchCompanyWebsite(
  companyName: string,
  cnpj?: string
): Promise<{ url: string; title: string } | null> {
  const query = cnpj 
    ? `"${companyName}" CNPJ ${cnpj} (site oficial OR sobre OR empresa)`
    : `"${companyName}" (site oficial OR sobre OR empresa OR contato)`

  const response = await multiSearch({ query, maxResults: 3 })

  // Filtrar apenas resultados relevantes
  for (const result of response.results) {
    const text = `${result.title} ${result.snippet}`.toLowerCase()
    const companyWords = companyName.toLowerCase().split(' ').filter(w => w.length > 3)
    
    const relevantMatches = companyWords.filter(word => text.includes(word))
    if (relevantMatches.length >= Math.min(2, companyWords.length)) {
      console.log('[MultiSearch] üåê Website encontrado:', result.url, `(via ${response.provider})`)
      return { url: result.url, title: result.title }
    }
  }

  console.log('[MultiSearch] ‚ö†Ô∏è Website n√£o encontrado')
  return null
}

/**
 * Buscar not√≠cias recentes da empresa
 */
export async function searchCompanyNews(
  companyName: string,
  cnpj?: string,
  maxResults: number = 5
): Promise<Array<{ title: string; snippet: string; link: string; date?: string }>> {
  const query = cnpj
    ? `"${companyName}" CNPJ ${cnpj} (anuncia OR lan√ßa OR investimento OR expans√£o OR contrato)`
    : `"${companyName}" (anuncia OR lan√ßa OR investimento OR expans√£o OR contrato OR novidade)`

  const response = await multiSearch({ query, maxResults, dateRestrict: 'y1' })

  // Filtrar not√≠cias relevantes
  const companyWords = companyName.toLowerCase().split(' ').filter(w => w.length > 3)
  const excludeTerms = [
    'bilion√°rio', 'criptomoeda', 'bitcoin', 'defesa civil',
    'aggregation report', 'mapa em tempo real', 'como agir'
  ]

  return response.results
    .filter(result => {
      const text = `${result.title} ${result.snippet}`.toLowerCase()
      const relevantMatches = companyWords.filter(word => text.includes(word))
      const hasExcludedTerm = excludeTerms.some(term => text.includes(term))
      const hasCnpj = cnpj && text.includes(cnpj.replace(/\D/g, ''))
      
      return (relevantMatches.length >= 2 || hasCnpj) && !hasExcludedTerm
    })
    .slice(0, maxResults)
    .map(result => ({
      title: result.title,
      snippet: result.snippet,
      link: result.url,
      date: result.date,
    }))
}

