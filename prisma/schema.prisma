// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String               @id @default(cuid())
  email          String               @unique
  name           String?
  password       String
  role           String               @default("VIEWER")
  organizations  OrganizationMember[]
  sessions       Session[]
  auditLogs      AuditLog[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model Organization {
  id        String               @id @default(cuid())
  name      String
  members   OrganizationMember[]
  projects  Project[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String       @default("MEMBER")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@unique([userId, organizationId])
}

model Project {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  description    String?
  vendor         String       @default("TOTVS") // TOTVS | OLV | CUSTOM
  cnpjQuota      Int          @default(100)
  cnpjQuotaUsed  Int          @default(0)
  companies      Company[]
  canvases       Canvas[]
  reports        Report[]
  alerts         Alert[]
  usageScans     UsageCompanyScan[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Company {
  id              String      @id @default(cuid())
  projectId       String?
  name            String
  tradeName       String?
  cnpj            String?     @unique
  domain          String?
  cnae            String?
  status          String?
  openingDate     DateTime?
  capital         Float?
  financial       String?     // receita, porte, risco, faturamento (JSON as string)
  industry        String?
  size            String?     // pequeno, médio, grande
  location        String?     // cidade, estado, país (JSON as string)
  userId          String?
  // B2B Intelligence (Sales Navigator)
  salesNavUrl     String?     // Sales Navigator company URL
  linkedinUrl     String?     // LinkedIn company page
  employeeCount   Int?        // Número de funcionários
  specialties     String[]    // ["ERP", "Manufatura", "Distribuição"]
  description     String?     // Company description
  yearFounded     Int?
  currentTechStack String?    // JSON: [{ category, product, vendor }]
  competitorStack  String?    // JSON: { erp: "SAP", crm: "Salesforce" }
  buyingSignals   String?     // JSON: [{ type, description, date, strength }]
  lastEnrichment  DateTime?   // Última atualização Sales Navigator
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  project         Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  stacks          TechStack[]
  maturity        CompanyTechMaturity[]
  icpProfile      ICPProfile?
  intentSignals   IntentSignal[]
  propensityScores PropensityScore[]
  nextBestActions NextBestAction[]
  cadenceExecutions CadenceExecution[]
  contacts        Contact[]
  benchmarks      Benchmark[]
  reports         Report[]
  analyses        Analysis[]
  people          Person[]
  buyingSignalHistory BuyingSignal[]
  firmographics   Firmographics[]
  techSignals     TechSignals[]
}

model TechStack {
  id          String    @id @default(cuid())
  companyId   String
  category    String    // ERP/CRM/Cloud/BI/Fiscal/E-commerce/etc
  product     String
  vendor      String?
  status      String    @default("Indeterminado") // Confirmado/Indeterminado/Em Avaliação
  confidence  Int       @default(0) // 0-100
  evidence    String    // { links: [], prints: [], headers: {}, jobs: [] } (JSON as string)
  source      String?   // Apollo/ZoomInfo/Manual/etc
  validatedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model CompanyTechMaturity {
  id                 String   @id @default(cuid())
  companyId          String
  vendor             String   // "TOTVS" | "OLV" | "CUSTOM"
  sources            Json     // { builtwith?:{}, similartech?:{}, headers?:{}, jobs?:{} }
  scores             Json     // { infra:0..100, systems:0..100, data:0..100, security:0..100, automation:0..100, culture:0..100, overall:0..100 }
  detectedStack      Json     // { erp?:[], crm?:[], cloud?:[], bi?:[], db?:[], integrations?:[] } + confidences
  fitRecommendations Json     // { products:[], olv_packs:[], rationale:[] }
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  company            Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, vendor])
}

model ICPProfile {
  id              String   @id @default(cuid())
  companyId       String
  vertical        String   // "Manufatura", "Distribuição", "Varejo", etc.
  subVertical     String?  // "Automotivo", "Alimentício", etc.
  tier            String   // "A", "B", "C" (ideal, bom, baixo fit)
  score           Float    // 0-100
  features        Json     // { porte: "Grande", stack: ["SAP"], maturidade: 85 }
  lastCalculated  DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId])
}

model IntentSignal {
  id          String   @id @default(cuid())
  companyId   String
  type        String   // "tech_change", "hiring", "funding", "news", "website_change"
  intensity   String   // "low", "medium", "high"
  source      String   // "news", "jobs", "website", "social"
  payload     Json     // dados específicos do sinal
  detectedAt  DateTime @default(now())
  expiresAt   DateTime // quando o sinal expira
  processed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, type, detectedAt])
}

model PropensityScore {
  id              String   @id @default(cuid())
  companyId       String
  offer           String   // "TOTVS_Protheus", "TOTVS_Fluig", "OLV_Consultoria"
  score           Float    // 0-100 probabilidade de conversão
  timeframe       Int      // dias para conversão (30, 60, 90)
  features        Json     // features usadas no cálculo
  lastCalculated  DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, offer])
}

model NextBestAction {
  id          String   @id @default(cuid())
  companyId   String
  action      String   // "email", "linkedin", "call", "wait"
  channel     String   // canal específico
  template    String?  // template a usar
  timing      String   // "immediate", "tomorrow", "next_week"
  rationale   String   // explicação da recomendação
  executed    Boolean  @default(false)
  executedAt  DateTime?
  result      String?  // "positive", "negative", "neutral"
  createdAt   DateTime @default(now())
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, createdAt])
}

model Cadence {
  id          String   @id @default(cuid())
  name        String
  vertical    String   // vertical alvo
  persona     String   // persona alvo
  steps       Json     // array de steps com timing e templates
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  executions  CadenceExecution[]

  @@unique([name, vertical, persona])
}

model CadenceExecution {
  id          String   @id @default(cuid())
  companyId   String
  cadenceId   String
  step        Int      // step atual da cadência
  status      String   // "active", "paused", "completed", "stopped"
  startedAt   DateTime @default(now())
  lastStepAt  DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  cadence     Cadence  @relation(fields: [cadenceId], references: [id], onDelete: Cascade)

  @@unique([companyId, cadenceId])
}

model Contact {
  id         String    @id @default(cuid())
  companyId  String
  name       String
  title      String
  department String?
  email      String?
  phone      String?
  linkedin   String?
  source     String    @default("Manual") // Apollo/Lusha/Manual/etc
  score      Int       @default(3) // 1-5 influência (1=baixo, 5=decisor C-level)
  notes      String?
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  company    Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Benchmark {
  id         String   @id @default(cuid())
  companyId  String
  metric     String   // NPS/CSAT/Market Share/Growth Rate/etc
  value      Float
  unit       String?  // %, $, pontos
  period     String?  // Q1 2024, 2023, etc
  source     String?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Canvas {
  id        String   @id @default(cuid())
  projectId String
  name      String
  structure String   // Estrutura do canvas (nodes/edges) ou Yjs snapshot (JSON as string)
  mode      String   @default("canva") // "canva" | "powerbi"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Report {
  id         String   @id @default(cuid())
  projectId  String
  companyId  String?
  type       String   // executive | snapshot | post_meeting | benchmark
  title      String
  html       String
  pdfUrl     String?
  metadata   String?  // dados adicionais como período, autor, etc (JSON as string)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  company    Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
}

model Alert {
  id          String    @id @default(cuid())
  projectId   String
  type        String    // revalidation/new_evidence/contact_change/benchmark_update
  title       String
  description String
  priority    String    @default("medium") // low/medium/high/critical
  status      String    @default("pending") // pending/acknowledged/resolved
  metadata    String?  // JSON as string
  dueAt       DateTime?
  resolvedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Analysis {
  id        String   @id @default(cuid())
  companyId String
  score     Int      // 0-100
  insights  String   // JSON as string
  redFlags  String?  // JSON as string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String   // CREATE/UPDATE/DELETE/VIEW
  resource   String   // Company/Contact/TechStack/etc
  resourceId String
  changes    String?  // before/after values (JSON as string)
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// SQLite não suporta enums, usando strings
// Role: VIEWER | EDITOR | ADMIN
// OrgRole: MEMBER | ADMIN | OWNER

// ==========================================
// MÓDULO 2: Preview Cache (Deep-Scan assíncrono)
// ==========================================
model PreviewCache {
  id         String   @id @default(cuid())
  jobId      String   @unique
  cnpj       String
  status     String   @default("pending") // pending | completed | error
  data       String?  // JSON stringificado do resultado completo
  error      String?  // Mensagem de erro se status='error'
  createdAt  DateTime @default(now())
  expiresAt  DateTime // TTL de 24 horas
  
  @@index([jobId])
  @@index([cnpj])
  @@index([expiresAt])
}

// ==========================================
// BILLING & QUOTAS (M8)
// ==========================================
model UsageCompanyScan {
  id         String   @id @default(cuid())
  projectId  String
  cnpj       String
  createdAt  DateTime @default(now())
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId, cnpj, createdAt])
}

// ==========================================
// DIGITAL PROFILING - IDENTITY RESOLUTION
// ==========================================
model Person {
  id              String            @id @default(cuid())
  companyId       String?
  name            String
  role            String?           // "Diretor de TI", "CFO", "COO"
  seniority       String?           // "C-Level", "VP", "Director", "Manager"
  department      String?           // "TI", "Financeiro", "Operações"
  email           String?
  phone           String?
  whatsapp        String?
  linkedinUrl     String?
  salesNavUrl     String?           // Sales Navigator URL
  tenure          String?           // "2 anos e 3 meses"
  background      String?           // Formação, experiência
  skills          String[]          // ["ERP", "SAP", "Oracle"]
  previousCompanies String?         // JSON: [{ company, role, duration }]
  lastJobChange   DateTime?         // Útil para detectar oportunidade
  company         Company?          @relation(fields: [companyId], references: [id], onDelete: SetNull)
  identityProfiles IdentityProfile[]
  personaFeatures PersonaFeatures?
  playbooks       Playbook[]
  outreachHistory OutreachHistory[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@index([companyId])
  @@index([email])
  @@index([seniority])
  @@index([lastJobChange])
}

model IdentityProfile {
  id          String          @id @default(cuid())
  personId    String
  network     String          // linkedin | twitter | instagram | youtube | github | medium
  handle      String?
  url         String
  confidence  Float           @default(0.0) // 0.0 - 1.0
  status      String          @default("pending") // pending | probable | confirmed
  metadata    String?         // JSON: { photo_url, bio, location, company_name, cross_links[] }
  person      Person          @relation(fields: [personId], references: [id], onDelete: Cascade)
  posts       IdentityPost[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  @@unique([personId, network, url])
  @@index([personId, status])
  @@index([network, status])
}

model IdentityPost {
  id          String          @id @default(cuid())
  profileId   String
  network     String
  postedAt    DateTime
  language    String?
  text        String
  link        String?
  metrics     String?         // JSON: { likes, shares, comments }
  topics      String[]        // Array de tópicos classificados
  intent      String?         // inform | ask | complain | buying_signal
  sentiment   String?         // positive | neutral | negative
  profile     IdentityProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now())
  
  @@index([profileId, postedAt])
  @@index([network, postedAt])
  @@index([topics])
  @@index([intent])
}

model PersonaFeatures {
  id              String   @id @default(cuid())
  personId        String   @unique
  topics          String[] // Array de tópicos principais
  objections      String[] // Array de objeções identificadas
  tone            String?  // formal | technical | direct | humor
  activitySlots   String?  // JSON: [{ day, hours[] }]
  channelPref     String[] // Array de canais preferidos
  dores           String[] // Array de dores citadas
  gatilhos        String[] // Array de gatilhos de valor
  person          Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([personId])
}

model Playbook {
  id              String   @id @default(cuid())
  personId        String
  vendor          String   // TOTVS | OLV | CUSTOM
  opening         String   // Abertura personalizada
  valueProp       String   // Proposta de valor
  caseLink        String?  // Link para case relevante
  cta             String   // Call to action
  productsTotvs   String[] // Array de produtos TOTVS sugeridos
  packagesOlv     String[] // Array de pacotes OLV sugeridos
  competitorMigration String? // Migração de competitor (ex: "SAP → TOTVS")
  estimatedDeal   Float?   // Ticket estimado
  decisionPath    String?  // JSON: [{ role, approval_power, influence }]
  lastRefreshedAt DateTime @default(now())
  person          Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([personId, vendor])
  @@index([lastRefreshedAt])
}

// ==========================================
// B2B INTELLIGENCE - BUYING SIGNALS
// ==========================================
model BuyingSignal {
  id          String   @id @default(cuid())
  companyId   String
  type        String   // "job_opening" | "expansion" | "funding" | "tech_hire" | "competitor_issue"
  description String
  strength    String   @default("medium") // "weak" | "medium" | "strong" | "very_strong"
  source      String   // "linkedin_jobs" | "news" | "sales_nav" | "crunchbase"
  detectedAt  DateTime @default(now())
  expiresAt   DateTime? // Alguns sinais expiram (ex: vaga pode ser preenchida)
  metadata    String?  // JSON: detalhes específicos do sinal
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  
  @@index([companyId, strength, detectedAt])
  @@index([type, detectedAt])
  @@index([expiresAt])
}

// ==========================================
// OUTREACH AUTOMATION - PROSPECÇÃO ATIVA
// ==========================================
model OutreachHistory {
  id          String   @id @default(cuid())
  personId    String
  channel     String   // "email" | "phone" | "whatsapp" | "linkedin" | "inmail"
  template    String   // Nome do template usado
  message     String   // Mensagem enviada
  sentAt      DateTime @default(now())
  status      String   @default("sent") // "sent" | "delivered" | "opened" | "clicked" | "replied" | "bounced"
  response    String?  // Resposta do lead (se houver)
  respondedAt DateTime?
  sentiment   String?  // "positive" | "neutral" | "negative" | "interested"
  nextFollowUp DateTime? // Próximo follow-up agendado
  person      Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  
  @@index([personId, sentAt])
  @@index([channel, status])
  @@index([nextFollowUp])
}

// ========================================
// TABELAS AUXILIARES (ADITIVAS)
// ========================================

model Firmographics {
  id              String   @id @default(cuid())
  companyId       String
  employeesRange  String?  // "51-200", "201-500", etc.
  revenueRange    String?  // "$1M-$10M", etc.
  techTags        String[] // ["SaaS", "Cloud-First", etc.]
  source          String   // "apollo", "manual", etc.
  fetchedAt       DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@index([companyId])
  @@index([source, fetchedAt])
}

model TechSignals {
  id         String   @id @default(cuid())
  companyId  String
  kind       String   // "header", "job", "mention", etc.
  key        String   // "X-Powered-By", "job_title", etc.
  value      String   // "PHP/7.4", "Analista SAP", etc.
  confidence Int      @default(50) // 0-100
  source     String   // "http_headers", "linkedin_jobs", etc.
  url        String?
  fetchedAt  DateTime @default(now())
  createdAt  DateTime @default(now())
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@index([companyId, kind])
  @@index([source, fetchedAt])
}

model SearchCache {
  id         String   @id @default(cuid())
  hash       String   @unique // Hash do payload da busca
  provider   String   // "serper", "apollo", "hunter", etc.
  payload    Json     // Request original
  response   Json     // Response cacheado
  fetchedAt  DateTime @default(now())
  expiresAt  DateTime // TTL: 24h para searches, 7d para company data
  createdAt  DateTime @default(now())
  
  @@index([provider, hash])
  @@index([expiresAt])
}

