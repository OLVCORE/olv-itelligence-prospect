/**
 * SEED SCRIPT - ProjectMember & Initial Data
 * OLV Intelligent Prospecting System
 * 
 * Este script popula dados iniciais para testes locais e desenvolvimento.
 * 
 * USO:
 * 1. Local: `npx ts-node prisma/seed-project-members.ts`
 * 2. Produ√ß√£o: Executar manualmente via SQL Editor no Supabase (n√£o automatizar)
 * 
 * IMPORTANTE:
 * - Substitua os IDs de exemplo pelos IDs reais do seu sistema
 * - Este script √© IDEMPOTENTE (pode rodar m√∫ltiplas vezes sem duplicar)
 * - Nunca commite dados sens√≠veis/reais neste arquivo
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Iniciando seed de ProjectMember...');

  // ========================================
  // 1) CRIAR OU ENCONTRAR USU√ÅRIO DE TESTE
  // ========================================
  
  const testUserId = 'test-user-admin-001'; // Substitua pelo auth.uid() real do Supabase Auth
  const testUserEmail = 'admin@olvintelligence.com.br';
  
  let testUser = await prisma.user.findUnique({
    where: { email: testUserEmail }
  });

  if (!testUser) {
    console.log(`üìù Criando usu√°rio de teste: ${testUserEmail}`);
    testUser = await prisma.user.create({
      data: {
        id: testUserId,
        email: testUserEmail,
        name: 'Admin OLV (Teste)',
        password: 'hashed-password-placeholder', // N√£o usar em produ√ß√£o
        role: 'ADMIN',
      }
    });
    console.log(`‚úÖ Usu√°rio criado: ${testUser.id}`);
  } else {
    console.log(`‚úÖ Usu√°rio j√° existe: ${testUser.id}`);
  }

  // ========================================
  // 2) CRIAR OU ENCONTRAR ORGANIZA√á√ÉO
  // ========================================
  
  const testOrgId = 'org-olv-001';
  
  let testOrg = await prisma.organization.findUnique({
    where: { id: testOrgId }
  });

  if (!testOrg) {
    console.log('üìù Criando organiza√ß√£o: OLV Intelligence');
    testOrg = await prisma.organization.create({
      data: {
        id: testOrgId,
        name: 'OLV Intelligence',
      }
    });
    console.log(`‚úÖ Organiza√ß√£o criada: ${testOrg.id}`);
  } else {
    console.log(`‚úÖ Organiza√ß√£o j√° existe: ${testOrg.id}`);
  }

  // Vincular usu√°rio √† organiza√ß√£o (se ainda n√£o estiver)
  const orgMemberExists = await prisma.organizationMember.findUnique({
    where: {
      userId_organizationId: {
        userId: testUser.id,
        organizationId: testOrg.id,
      }
    }
  });

  if (!orgMemberExists) {
    await prisma.organizationMember.create({
      data: {
        userId: testUser.id,
        organizationId: testOrg.id,
        role: 'ADMIN',
      }
    });
    console.log(`‚úÖ Usu√°rio ${testUser.email} adicionado √† organiza√ß√£o como ADMIN`);
  }

  // ========================================
  // 3) CRIAR OU ENCONTRAR PROJETO
  // ========================================
  
  const testProjectId = 'default-project-id'; // ID padr√£o usado nos endpoints
  
  let testProject = await prisma.project.findUnique({
    where: { id: testProjectId }
  });

  if (!testProject) {
    console.log('üìù Criando projeto: Prospec√ß√£o TOTVS 2025');
    testProject = await prisma.project.create({
      data: {
        id: testProjectId,
        organizationId: testOrg.id,
        name: 'Prospec√ß√£o TOTVS 2025',
        description: 'Projeto padr√£o para testes de integra√ß√µes reais',
        vendor: 'TOTVS',
        cnpjQuota: 1000,
        cnpjQuotaUsed: 0,
      }
    });
    console.log(`‚úÖ Projeto criado: ${testProject.id}`);
  } else {
    console.log(`‚úÖ Projeto j√° existe: ${testProject.id}`);
  }

  // ========================================
  // 4) CRIAR ProjectMember (RLS)
  // ========================================
  
  const projectMemberExists = await prisma.projectMember.findUnique({
    where: {
      projectId_userId: {
        projectId: testProject.id,
        userId: testUser.id,
      }
    }
  });

  if (!projectMemberExists) {
    console.log('üìù Adicionando usu√°rio ao projeto como OWNER');
    await prisma.projectMember.create({
      data: {
        projectId: testProject.id,
        userId: testUser.id,
        role: 'owner',
      }
    });
    console.log(`‚úÖ ProjectMember criado: ${testUser.email} ‚Üí ${testProject.name} (owner)`);
  } else {
    console.log(`‚úÖ ProjectMember j√° existe: ${testUser.email} ‚Üí ${testProject.name}`);
  }

  // ========================================
  // 5) CRIAR EMPRESA DE TESTE (OPCIONAL)
  // ========================================
  
  const testCompanyCnpj = '06.990.590/0001-23'; // Kelludy CNPJ real (exemplo)
  
  let testCompany = await prisma.company.findUnique({
    where: { cnpj: testCompanyCnpj }
  });

  if (!testCompany) {
    console.log(`üìù Criando empresa de teste: ${testCompanyCnpj}`);
    testCompany = await prisma.company.create({
      data: {
        projectId: testProject.id,
        name: 'KELLUDY INDUSTRIA E COMERCIO DE MAQUINAS E EQUIPAMENTOS LTDA',
        tradeName: 'Kelludy',
        cnpj: testCompanyCnpj,
        domain: 'kelludy.com.br',
        cnae: '2833-0/00', // Fabrica√ß√£o de m√°quinas
        status: 'ATIVA',
        capital: 5000.00,
        size: 'PEQUENO',
        location: JSON.stringify({ cidade: 'S√£o Paulo', estado: 'SP', pais: 'Brasil' }),
      }
    });
    console.log(`‚úÖ Empresa criada: ${testCompany.id}`);
  } else {
    console.log(`‚úÖ Empresa j√° existe: ${testCompany.id}`);
  }

  // ========================================
  // 6) POPULAR Firmographics (OPCIONAL)
  // ========================================
  
  const firmoExists = await prisma.firmographics.findFirst({
    where: {
      companyId: testCompany.id,
      source: 'manual',
    }
  });

  if (!firmoExists) {
    console.log('üìù Criando Firmographics de teste');
    await prisma.firmographics.create({
      data: {
        companyId: testCompany.id,
        source: 'manual',
        employeesRange: '11-50',
        revenueRange: '$1M-$5M',
        techTags: ['ERP', 'Manufatura', 'Supply Chain'],
      }
    });
    console.log('‚úÖ Firmographics criado');
  } else {
    console.log('‚úÖ Firmographics j√° existe');
  }

  // ========================================
  // 7) POPULAR TechSignals (OPCIONAL)
  // ========================================
  
  const signalExists = await prisma.techSignals.findFirst({
    where: {
      companyId: testCompany.id,
      kind: 'http_header',
      source: 'manual',
    }
  });

  if (!signalExists) {
    console.log('üìù Criando TechSignal de teste');
    await prisma.techSignals.create({
      data: {
        companyId: testCompany.id,
        kind: 'http_header',
        key: 'X-Powered-By',
        value: 'PHP/7.4',
        confidence: 80,
        source: 'manual',
        url: 'https://kelludy.com.br',
      }
    });
    console.log('‚úÖ TechSignal criado');
  } else {
    console.log('‚úÖ TechSignal j√° existe');
  }

  // ========================================
  // 8) POPULAR CompanyTechMaturity (OPCIONAL)
  // ========================================
  
  const maturityExists = await prisma.companyTechMaturity.findUnique({
    where: {
      companyId_vendor: {
        companyId: testCompany.id,
        vendor: 'TOTVS',
      }
    }
  });

  if (!maturityExists) {
    console.log('üìù Criando CompanyTechMaturity de teste');
    await prisma.companyTechMaturity.create({
      data: {
        companyId: testCompany.id,
        vendor: 'TOTVS',
        sources: {
          manual: true,
          http_headers: true,
        },
        scores: {
          infra: 60,
          systems: 50,
          data: 40,
          security: 50,
          automation: 30,
          culture: 20,
          overall: 42,
        },
        detectedStack: {
          erp: [],
          crm: [],
          cloud: [],
          bi: [],
          db: [],
          integrations: [],
          security: [],
        },
        fitRecommendations: {
          products: ['TOTVS Protheus', 'Fluig'],
          olv_packs: ['Diagn√≥stico 360¬∞'],
          rationale: ['Baixa maturidade digital, oportunidade para moderniza√ß√£o'],
        },
      }
    });
    console.log('‚úÖ CompanyTechMaturity criado');
  } else {
    console.log('‚úÖ CompanyTechMaturity j√° existe');
  }

  // ========================================
  // 9) RESUMO FINAL
  // ========================================
  
  console.log('\nüéâ Seed conclu√≠do com sucesso!\n');
  console.log('üìä RESUMO:');
  console.log(`   üë§ Usu√°rio: ${testUser.email} (${testUser.id})`);
  console.log(`   üè¢ Organiza√ß√£o: ${testOrg.name} (${testOrg.id})`);
  console.log(`   üìÅ Projeto: ${testProject.name} (${testProject.id})`);
  console.log(`   üîë ProjectMember: ${testUser.email} ‚Üí ${testProject.name} (owner)`);
  console.log(`   üè≠ Empresa: ${testCompany.name} (${testCompany.cnpj})`);
  console.log(`   üìà Dados populados: Firmographics, TechSignals, CompanyTechMaturity`);
  console.log('\nüí° PR√ìXIMOS PASSOS:');
  console.log('   1. Aplicar RLS policies: `psql < prisma/migrations/rls-policies.sql`');
  console.log('   2. Testar integra√ß√µes: `curl http://localhost:3000/api/health`');
  console.log('   3. Acessar dashboard: http://localhost:3000/dashboard');
  console.log('   4. Login autom√°tico com: admin@olvintelligence.com.br\n');
}

main()
  .catch((e) => {
    console.error('‚ùå Erro durante seed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

